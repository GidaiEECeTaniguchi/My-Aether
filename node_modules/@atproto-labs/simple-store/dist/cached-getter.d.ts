import { Awaitable, GetOptions as GetStoredOptions, Key, SimpleStore, Value } from './simple-store.js';
export type { GetStoredOptions };
export type GetCachedOptions<C = void> = {
    signal?: AbortSignal;
    /**
     * Do not use the cache to get the value. Always get a new value from the
     * getter function.
     *
     * @default false
     */
    noCache?: boolean;
    /**
     * When getting a value from the cache, allow the value to be returned even if
     * it is stale.
     *
     * Has no effect if the `isStale` option was not provided to the CachedGetter.
     *
     * @default true // If the CachedGetter has an isStale option
     * @default false // If no isStale option was provided to the CachedGetter
     */
    allowStale?: boolean;
} & (C extends void ? {
    context?: C;
} : {
    context: C;
});
export type Getter<K extends Key, V extends Value, C = void> = (key: K, options: GetCachedOptions<C>, storedValue: undefined | V) => Awaitable<V>;
export type CachedGetterOptions<K extends Key, V extends Value> = {
    isStale?: (key: K, value: V) => boolean | PromiseLike<boolean>;
    onStoreError?: (err: unknown, key: K, value: V) => void | PromiseLike<void>;
    deleteOnError?: (err: unknown, key: K, value: V) => boolean | PromiseLike<boolean>;
};
/**
 * Wrapper utility that uses a store to speed up the retrieval of values from an
 * (expensive) getter function.
 */
export declare class CachedGetter<K extends Key = string, V extends Value = Value, C = void> {
    readonly getter: Getter<K, V, C>;
    readonly store: SimpleStore<K, V>;
    readonly options?: CachedGetterOptions<K, V> | undefined;
    private pending;
    constructor(getter: Getter<K, V, C>, store: SimpleStore<K, V>, options?: CachedGetterOptions<K, V> | undefined);
    get(key: C extends void ? K : never, options?: GetCachedOptions<C>): Promise<V>;
    get(key: C extends void ? never : K, options: GetCachedOptions<C>): Promise<V>;
    getStored(key: K, options?: GetStoredOptions): Promise<V | undefined>;
    setStored(key: K, value: V): Promise<void>;
    delStored(key: K, _cause?: unknown): Promise<void>;
}
//# sourceMappingURL=cached-getter.d.ts.map